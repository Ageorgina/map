import { Component, OnInit } from '@angular/core';
import * as Highcharts from 'highcharts/highmaps';
import { EstadosService } from '../../general/services/estados.service';
import { ActivatedRoute } from '@angular/router';
import { CookieService } from 'ngx-cookie-service';
declare var require: any;
const Boost = require('highcharts/modules/boost');
const noData = require('highcharts/modules/no-data-to-display');
const More = require('highcharts/highcharts-more');
Boost(Highcharts);
noData(Highcharts);
More(Highcharts);
noData(Highcharts);
var $;
/*const data = [
  ["1172",1172],
  ["1461",1461],
  ["1466",1466],
  ["1184",1184],
  ["1310",1310],
  ["1314",1314],
  ["1288",1288],
  ["1289",1289],
  ["1281",1281],
  ["1305",1305],
  ["1284",1284],
  ["1290",1290],
  ["1293",1293],
  ["1244",1244],
  ["1226",1226],
  ["1396",1396],
  ["1280",1280],
  ["1335",1335],
  ["1297",1297],
  ["1286",1286],
  ["1304",1304],
  ["1282",1282],
  ["1268",1268],
  ["1238",1238],
  ["1237",1237],
  ["1303",1303],
  ["1251",1251],
  ["1256",1256],
  ["1292",1292],
  ["1370",1370],
  ["1211",1211],
  ["1255",1255],
  ["1241",1241],
  ["1217",1217],
  ["1296",1296],
  ["1235",1235],
  ["1243",1243],
  ["1231",1231],
  ["1371",1371],
  ["1394",1394],
  ["1279",1279],
  ["1301",1301],
  ["1239",1239],
  ["1236",1236],
  ["1295",1295],
  ["1246",1246],
  ["1299",1299],
  ["1252",1252],
  ["1302",1302],
  ["1234",1234],
  ["1225",1225],
  ["1308",1308],
  ["1265",1265],
  ["1291",1291],
  ["1372",1372],
  ["1245",1245],
  ["1298",1298],
  ["1262",1262],
  ["1307",1307],
  ["1306",1306],
  ["1249",1249],
  ["1300",1300],
  ["1285",1285],
  ["1263",1263],
  ["1240",1240],
  ["1334",1334],
  ["1269",1269],
  ["1229",1229],
  ["1216",1216],
  ["1274",1274],
  ["1212",1212],
  ["1250",1250],
  ["1230",1230],
  ["1278",1278],
  ["1223",1223],
  ["1294",1294],
  ["1273",1273],
  ["1242",1242],
  ["1375",1375],
  ["1253",1253],
  ["1287",1287],
  ["1369",1369],
  ["1373",1373],
  ["1270",1270],
  ["1333",1333],
  ["1219",1219],
  ["1378",1378],
  ["1376",1376],
  ["1272",1272],
  ["1221",1221],
  ["1283",1283],
  ["1337",1337],
  ["1220",1220],
  ["1247",1247],
  ["1222",1222],
  ["1224",1224],
  ["1275",1275],
  ["1198",1198],
  ["1233",1233],
  ["1344",1344],
  ["1232",1232],
  ["1254",1254],
  ["1331",1331],
  ["1228",1228],
  ["1199",1199],
  ["1259",1259],
  ["1277",1277],
  ["1203",1203],
  ["1205",1205],
  ["1188",1188],
  ["1204",1204],
  ["1208",1208],
  ["1374",1374],
  ["1380",1380],
  ["1330",1330],
  ["1377",1377],
  ["1227",1227],
  ["1325",1325],
  ["1328",1328],
  ["1189",1189],
  ["1340",1340],
  ["1196",1196],
  ["1339",1339],
  ["1267",1267],
  ["1341",1341],
  ["1194",1194],
  ["1206",1206],
  ["1248",1248],
  ["1327",1327],
  ["1326",1326],
  ["1257",1257],
  ["1190",1190],
  ["1195",1195],
  ["1264",1264],
  ["1338",1338],
  ["1336",1336],
  ["1368",1368],
  ["1215",1215],
  ["1342",1342],
  ["1207",1207],
  ["1276",1276],
  ["1197",1197],
  ["1271",1271],
  ["1332",1332],
  ["1213",1213],
  ["1200",1200],
  ["1218",1218],
  ["1258",1258],
  ["1209",1209],
  ["1309",1309],
  ["1346",1346],
  ["1214",1214],
  ["1345",1345],
  ["1367",1367],
  ["1210",1210],
  ["1329",1329],
  ["1343",1343],
  ["1261",1261],
  ["1266",1266],
  ["1193",1193],
  ["1260",1260],
  ["1436",1436],
  ["1457",1457],
  ["1608",1608],
  ["1601",1601],
  ["1594",1594],
  ["1609",1609],
  ["1607",1607],
  ["1580",1580],
  ["1600",1600],
  ["1539",1539],
  ["1437",1437],
  ["1610",1610],
  ["1571",1571],
  ["1582",1582],
  ["1606",1606],
  ["1596",1596],
  ["1603",1603],
  ["1589",1589],
  ["1599",1599],
  ["1602",1602],
  ["1588",1588],
  ["1605",1605],
  ["1458",1458],
  ["1585",1585],
  ["1544",1544],
  ["1575",1575],
  ["1604",1604],
  ["1590",1590],
  ["1592",1592],
  ["1595",1595],
  ["1574",1574],
  ["1587",1587],
  ["1597",1597],
  ["1524",1524],
  ["1573",1573],
  ["1591",1591],
  ["1522",1522],
  ["1576",1576],
  ["1578",1578],
  ["1572",1572],
  ["1581",1581],
  ["1521",1521],
  ["1584",1584],
  ["1586",1586],
  ["1379",1379],
  ["1542",1542],
  ["1579",1579],
  ["1541",1541],
  ["1593",1593],
  ["1441",1441],
  ["1545",1545],
  ["1443",1443],
  ["1598",1598],
  ["1435",1435],
  ["1439",1439],
  ["1440",1440],
  ["1577",1577],
  ["1527",1527],
  ["1525",1525],
  ["1421",1421],
  ["1438",1438],
  ["1536",1536],
  ["1543",1543],
  ["1400",1400],
  ["1404",1404],
  ["1534",1534],
  ["1381",1381],
  ["1532",1532],
  ["1528",1528],
  ["1533",1533],
  ["1424",1424],
  ["1531",1531],
  ["1416",1416],
  ["1450",1450],
  ["1401",1401],
  ["1417",1417],
  ["1523",1523],
  ["1419",1419],
  ["1422",1422],
  ["1448",1448],
  ["1452",1452],
  ["1434",1434],
  ["1537",1537],
  ["1538",1538],
  ["1583",1583],
  ["1415",1415],
  ["1431",1431],
  ["1453",1453],
  ["1535",1535],
  ["1397",1397],
  ["1413",1413],
  ["1399",1399],
  ["1454",1454],
  ["1392",1392],
  ["1444",1444],
  ["1468",1468],
  ["1530",1530],
  ["1395",1395],
  ["1418",1418],
  ["1547",1547],
  ["1402",1402],
  ["1526",1526],
  ["1420",1420],
  ["1426",1426],
  ["1428",1428],
  ["1455",1455],
  ["1432",1432],
  ["1408",1408],
  ["1433",1433],
  ["1447",1447],
  ["1423",1423],
  ["1529",1529],
  ["1427",1427],
  ["1425",1425],
  ["1540",1540],
  ["1429",1429],
  ["1398",1398],
  ["1393",1393],
  ["1405",1405],
  ["1414",1414],
  ["1442",1442],
  ["1451",1451],
  ["1406",1406],
  ["1391",1391],
  ["1403",1403],
  ["1412",1412],
  ["1430",1430],
  ["1410",1410],
  ["1446",1446],
  ["1449",1449],
  ["1546",1546],
  ["1407",1407],
  ["1445",1445],
  ["1456",1456],
  ["0732",732],
  ["0735",735],
  ["0739",739],
  ["0742",742],
  ["0764",764],
  ["0741",741],
  ["0749",749],
  ["0733",733],
  ["0740",740],
  ["0760",760],
  ["0761",761],
  ["0775",775],
  ["0779",779],
  ["0774",774],
  ["0773",773],
  ["0750",750],
  ["0763",763],
  ["0778",778],
  ["0805",805],
  ["0804",804],
  ["0803",803],
  ["0802",802],
  ["0776",776],
  ["0757",757],
  ["0758",758],
  ["0829",829],
  ["0831",831],
  ["0868",868],
  ["0869",869],
  ["0756",756],
  ["0753",753],
  ["0755",755],
  ["0751",751],
  ["0780",780],
  ["0734",734],
  ["0762",762],
  ["0752",752],
  ["0759",759],
  ["0754",754],
  ["0777",777],
  ["0772",772],
  ["1614",1614],
  ["1613",1613],
  ["1612",1612],
  ["1611",1611],
  ["1616",1616],
  ["1615",1615],
  ["1617",1617],
  ["1620",1620],
  ["1619",1619],
  ["1621",1621],
  ["1631",1631],
  ["1629",1629],
  ["1623",1623],
  ["1627",1627],
  ["1630",1630],
  ["1635",1635],
  ["1634",1634],
  ["1633",1633],
  ["1636",1636],
  ["1638",1638],
  ["1637",1637],
  ["1639",1639],
  ["1641",1641],
  ["1625",1625],
  ["1640",1640],
  ["1622",1622],
  ["1624",1624],
  ["1628",1628],
  ["1626",1626],
  ["1632",1632],
  ["1618",1618],
  ["0730",730],
  ["0801",801],
  ["0800",800],
  ["0731",731],
  ["0900",900],
  ["0901",901],
  ["0806",806],
  ["0842",842],
  ["0841",841],
  ["0874",874],
  ["0843",843],
  ["0809",809],
  ["0875",875],
  ["0799",799],
  ["0810",810],
  ["0784",784],
  ["0861",861],
  ["0840",840],
  ["0860",860],
  ["0839",839],
  ["0798",798],
  ["0782",782],
  ["0808",808],
  ["0898",898],
  ["0899",899],
  ["0939",939],
  ["0947",947],
  ["0862",862],
  ["0960",960],
  ["0896",896],
  ["0948",948],
  ["0828",828],
  ["0940",940],
  ["0870",870],
  ["0934",934],
  ["0910",910],
  ["0915",915],
  ["0935",935],
  ["0944",944],
  ["0876",876],
  ["0783",783],
  ["0837",837],
  ["0955",955],
  ["0807",807],
  ["0864",864],
  ["0873",873],
  ["0871",871],
  ["0781",781],
  ["0958",958],
  ["0911",911],
  ["0835",835],
  ["0863",863],
  ["0912",912],
  ["0865",865],
  ["0838",838],
  ["0914",914],
  ["0913",913],
  ["0959",959],
  ["0945",945],
  ["0941",941],
  ["0957",957],
  ["0866",866],
  ["0953",953],
  ["0954",954],
  ["0942",942],
  ["0956",956],
  ["0897",897],
  ["0951",951],
  ["0902",902],
  ["0872",872],
  ["0937",937],
  ["0978",978],
  ["0833",833],
  ["0903",903],
  ["0867",867],
  ["0938",938],
  ["0836",836],
  ["0904",904],
  ["0936",936],
  ["0906",906],
  ["0909",909],
  ["0979",979],
  ["0908",908],
  ["0832",832],
  ["0834",834],
  ["0952",952],
  ["0950",950],
  ["0946",946],
  ["0949",949],
  ["0905",905],
  ["0943",943],
  ["0907",907]
];*/

@Component({
  selector: 'app-mapa-secciones',
  templateUrl: './mapa-secciones.component.html',
  styleUrls: ['./mapa-secciones.component.scss']
})
export class MapaSeccionesComponent implements OnInit {
  datosSecciones = [];
  headers = [];
  secciones = [];
  datosSeccion: any;
  coloresHxd = [];
  seccionID: any;
  selectedSeccion: any;
  temas: any;
  selectedId: any;
  emociones: any;
  mujeres: any;
  hombres: any;
  impactos: any;
  id: any;
  idCVS: any;
  cookies: any
  seccionInf= [];
  cvsInfo: any

  constructor(private estado: EstadosService, private route: ActivatedRoute, private cookieService: CookieService) {
    this.id = this.route.snapshot.paramMap.get('id');
    if (this.id.length < 3) {
      let completar  =  3 - this.id.length;
      for(let i = 0 ; i < completar; i ++ ) {
        this.id = '0' + this.id.toString();
      }
      }
      this.traerData(this.id).finally(()=>{
        console.log('termino 1')
        this.estado.getSecciones(this.id).subscribe( cvsInfo => {
       
          this.construirMapa(cvsInfo);
        })
      });
   }

   mapa: any = {
     chart: {
       backgroundColor: '#3F3F3F',
      },
      title: { text: '' },
      mapNavigation: { enabled: true
      },
      colorAxis: {
        tickPixelInterval: 100,
        showInLegend: false,
        dataClasses: this.infoSecciones()
      },
      series: [{
        borderColor: '#2e2c2c',
        states: {
          hover: {
            brightness: -0.15,
            borderColor: 'gray'
          }
      },
        keys: ['seccion', 'value'],
        joinBy: 'seccion',
        dataLabels: {
          enabled: true,
          format: '{point.properties.seccion}'
        }
      }]
    };

   ngOnInit() {

    }

  async construirMapa(seccionesJSON) {
    console.log('2 seccionesJSON', seccionesJSON)
    this.mapa.series[0].data = this.seccionInf;
    this.mapa.chart.map = seccionesJSON;
      
      Highcharts.mapChart('secciones', this.mapa);
  }

  infoSecciones() {
    console.log('3 inicia pintar el mapa')
    this.id = this.route.snapshot.paramMap.get('id');
    if (this.id.length < 3) {
      let completar  =  3 - this.id.length;
      for(let i = 0 ; i < completar; i ++ ) {
        this.id = '0' + this.id.toString();
      }
      }
    this.estado.getCSV(this.id).subscribe(info => {
      console.log('4 entro a recuperar el cvs info', info)
      const match = info.match(/\n+[0-9]{1,4}/g);
      for ( let i = 0; i < match.length; i++) {
        info = info.replace(match[i], '|' + match[i].substring(1, match[i].length));
      }
      this.datosSecciones = info.split('|');
      this.headers = this.datosSecciones[0].split(',');
      this.generarColores(info.split('|')).finally(() => {
        console.log('5 convirtio los colores a hxd y los asigna a el mapa this.coloresHxd', this.coloresHxd)
        this.mapa.colorAxis.dataClasses = this.coloresHxd;
      });
    });
  }

   async generarColores(datosSecciones) {
     console.log(datosSecciones)
     for (let i = 1; i < datosSecciones.length; i++) {
      const datos = datosSecciones[i].split(',');
      const selectColor = {
            color: this.cambiarColor(datos[1]),
            from: datos[0],
            to: datos[0]
        };
      this.coloresHxd.push(selectColor);
    }
  }

  cambiarColor(color) {
    switch (color) {
      case 'Naranja': return '#fc7f25';
      case 'Rojo': return '#af0d0d';
      case 'Amarillo': return '#fade07';
      default: return '#ffffff';
    }
  }

  seccionClicked(click) {
    const lineBreak = '\n';
    this.seccionID = click;
    if (this.seccionID === null) { return; }
    for (let i = 1; i < this.datosSecciones.length; i++) {
      const datos = this.datosSecciones[i].split(',');
      if (datos[0].includes(this.seccionID.toString())){
        this.selectedSeccion = datos;
        this.seccionID = this.seccionID;
        this.temas = datos[2].replace(/[/]/g, lineBreak);
        this.emociones = datos[3].replace(/'<br>', '[/]'/g, lineBreak);
        this.mujeres = datos[4].replace(/[<br/>, <br>, /]/g, lineBreak);
        this.hombres = datos[5].replace(/[<br/>, <br>, /]/g, lineBreak);
        this.impactos = datos[6].replace(/[/]/g, lineBreak) + lineBreak + datos[7];
      }
    }

  }

 async traerData(id) {
    this.estado.getSeccionesMapas(id).subscribe(secciones => {
      
      this.seccionInf = secciones;
      console.log('1 this.seccionInf', this.seccionInf)
    });
  }
}
